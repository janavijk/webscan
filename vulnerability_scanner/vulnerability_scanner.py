import requests

# Check for Reflected Cross-Site Scripting (XSS)
def check_reflected_xss(url):
    response = requests.get(url)
    if '<script>' in response.text:
        return "Reflected Cross-Site Scripting (XSS) vulnerability found"
    return "No Reflected Cross-Site Scripting (XSS) vulnerabilities found."

# Check for Stored Cross-Site Scripting (XSS)
def check_stored_xss(url):
    stored_xss_url = url + '/comments'
    response = requests.get(stored_xss_url)
    if '<script>' in response.text:
        return "Stored Cross-Site Scripting (XSS) vulnerability found in comments section"
    return "No Stored Cross-Site Scripting (XSS) vulnerabilities found."

# Check for Standard SQL Injection
def check_sql_injection(url):
    sql_injection_url = url + '/search?query=\' OR 1=1--'
    response = requests.get(sql_injection_url)
    if 'Admin panel' in response.text:
        return "Standard SQL Injection vulnerability found"
    return "No Standard SQL Injection vulnerabilities found."

# Check for Broken Authentication using SQL Injection
def check_broken_authentication(url):
    login_url = url + '/login'
    data = {'username': '\' OR 1=1--', 'password': 'password'}
    response = requests.post(login_url, data=data)
    if 'Welcome, admin!' in response.text:
        return "Broken Authentication using SQL Injection vulnerability found"
    return "No Broken Authentication using SQL Injection vulnerabilities found."

# Check for Autocomplete Enabled on Password Fields
def check_autocomplete_enabled(url):
    login_url = url + '/login'
    response = requests.get(login_url)
    if 'autocomplete="on" type="password"' in response.text:
        return "Autocomplete Enabled on Password Fields vulnerability found"
    return "No Autocomplete Enabled on Password Fields vulnerabilities found."

# Check for Potentially Insecure Direct Object References
def check_direct_object_references(url):
    insecure_reference_url = url + '/admin/users/1'
    response = requests.get(insecure_reference_url)
    if 'User Profile' in response.text:
        return "Potentially Insecure Direct Object References vulnerability found"
    return "No Potentially Insecure Direct Object References vulnerabilities found."

# Check if Directory Listing is Enabled
def check_directory_listing_enabled(url):
    directory_url = url + '/uploads/'
    response = requests.get(directory_url)
    if 'Index of /uploads' in response.text:
        return "Directory Listing Enabled vulnerability found"
    return "No Directory Listing vulnerabilities found."

# Check for HTTP Banner Disclosure
def check_http_banner_disclosure(url):
    response = requests.get(url)
    if 'Server' in response.headers:
        return "HTTP Banner Disclosure vulnerability found"
    return "No HTTP Banner Disclosure vulnerabilities found."

# Check if SSL Certificate is Trusted
def check_ssl_certificate_trusted(url):
    response = requests.get(url)
    if 'SSL certificate not trusted' in response.text:
        return "SSL Certificate not Trusted vulnerability found"
    return "SSL Certificate is trusted."

# Check for Unvalidated Redirects
def check_unvalidated_redirects(url):
    redirect_url = url + '/redirect?url=https://malicious-site.com'
    response = requests.get(redirect_url)
    if 'Redirecting to: https://malicious-site.com' in response.text:
        return "Unvalidated Redirects vulnerability found"
    return "No Unvalidated Redirects vulnerabilities found."

# Scan website for vulnerabilities
def scan_for_vulnerabilities(url):
    vulnerabilities = {}

    # Check for each vulnerability
    vulnerabilities['reflected_xss'] = check_reflected_xss(url)
    vulnerabilities['stored_xss'] = check_stored_xss(url)
    vulnerabilities['sql_injection'] = check_sql_injection(url)
    vulnerabilities['broken_authentication'] = check_broken_authentication(url)
    vulnerabilities['autocomplete_enabled'] = check_autocomplete_enabled(url)
    vulnerabilities['direct_object_references'] = check_direct_object_references(url)
    vulnerabilities['directory_listing_enabled'] = check_directory_listing_enabled(url)
    vulnerabilities['http_banner_disclosure'] = check_http_banner_disclosure(url)
    vulnerabilities['ssl_certificate_trusted'] = check_ssl_certificate_trusted(url)
    vulnerabilities['unvalidated_redirects'] = check_unvalidated_redirects(url)

    return vulnerabilities
